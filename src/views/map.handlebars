<div class="container mx-auto p-4">
  <h1 class="text-2xl font-bold mb-4">Bản Đồ Tương Tác - Lịch Cúp Điện Việt Nam</h1>
  <p class="mb-4">Chọn một tỉnh trên bản đồ để xem lịch cúp điện chi tiết. Các tỉnh được tô sáng có lịch cúp điện trong 24 giờ tới.</p>
  
  <!-- Container for the SVG map -->
  <div id="map-container" class="w-full h-auto min-h-[500px] bg-base-200 rounded-lg shadow-md overflow-hidden">
    <!-- SVG map will be loaded here -->
  </div>
  
  <!-- Legend for map highlighting -->
  <div class="mt-4 flex items-center">
    <div class="w-4 h-4 bg-error mr-2"></div>
    <span class="text-sm">Tỉnh có lịch cúp điện trong 24 giờ tới</span>
  </div>
</div>

<!-- Script to load and initialize the interactive map -->
<script src="https://cdn.jsdelivr.net/gh/ahuseyn/interactive-svg-maps@master/dist/interactive-svg-maps.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Load the SVG map of Vietnam
    fetch('https://raw.githubusercontent.com/ahuseyn/interactive-svg-maps/master/maps/VN.svg')
      .then(response => response.text())
      .then(svgData => {
        // Insert the SVG into the container
        document.getElementById('map-container').innerHTML = svgData;
        
        // Get the SVG element
        const svg = document.querySelector('#map-container svg');
        svg.setAttribute('width', '100%');
        svg.setAttribute('height', '100%');
        
        // Check if InteractiveSvgMap is defined
        if (typeof InteractiveSvgMap !== 'undefined') {
          // Initialize interactive map
          const map = new InteractiveSvgMap(svg, {
            onClick: function(element, id, name) {
              // Redirect to search page with province parameter
              // Extract province name from ID or name attribute if needed
              // Assuming ID format or name contains province info; adjust as per actual SVG structure
              let provinceName = name || id.split('-').pop().replace(/_/g, ' ');
              // Capitalize first letter of each word for consistency
              provinceName = provinceName.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');
              window.location.href = `/search?province=${encodeURIComponent(provinceName)}`;
            }
          });
          
          // Highlight provinces with outages in the next 24 hours
          const highlightedProvinces = {{{json highlightedProvinces}}};
          if (highlightedProvinces && highlightedProvinces.length > 0) {
            highlightedProvinces.forEach(province => {
              // Attempt to find the element by ID or class; adjust based on SVG structure
              // This is a placeholder; the actual ID format needs to match the SVG
              const provinceElement = svg.querySelector(`[id*="${province.replace(/\s/g, '_')}"]`) || 
                                      svg.querySelector(`[class*="${province.replace(/\s/g, '_')}"]`);
              if (provinceElement) {
                provinceElement.style.fill = '#ef4444'; // Tailwind 'error' color (red)
                provinceElement.style.transition = 'fill 0.3s ease';
              }
            });
          }
        } else {
          console.error('InteractiveSvgMap library not loaded.');
          // Fallback: Add basic click event listeners to SVG elements
          const elements = svg.querySelectorAll('path, g');
          elements.forEach(el => {
            el.style.cursor = 'pointer';
            el.addEventListener('click', function() {
              const id = this.getAttribute('id') || this.getAttribute('class') || '';
              let provinceName = id.split('-').pop().replace(/_/g, ' ');
              provinceName = provinceName.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');
              window.location.href = `/search?province=${encodeURIComponent(provinceName)}`;
            });
          });
          
          // Highlight provinces with outages in the next 24 hours
          const highlightedProvinces = {{{json highlightedProvinces}}};
          if (highlightedProvinces && highlightedProvinces.length > 0) {
            highlightedProvinces.forEach(province => {
              const provinceElement = svg.querySelector(`[id*="${province.replace(/\s/g, '_')}"]`) || 
                                      svg.querySelector(`[class*="${province.replace(/\s/g, '_')}"]`);
              if (provinceElement) {
                provinceElement.style.fill = '#ef4444'; // Tailwind 'error' color (red)
                provinceElement.style.transition = 'fill 0.3s ease';
              }
            });
          }
        }
      })
      .catch(error => {
        console.error('Error loading SVG map:', error);
        document.getElementById('map-container').innerHTML = '<p class="text-error p-4">Không thể tải bản đồ. Vui lòng thử lại sau.</p>';
      });
  });
</script>
